@using System.ComponentModel.DataAnnotations
@using CloakCare.Web.Data.Models

<MudDialog Style="min-width: 100px; width: 400px">
    <DialogContent >
        <EditForm sm="12" Model="@Model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Class="mb-5">
                <MudCardContent>
                    <MudDatePicker @ref="_datePicker" @onfocus="@(() =>SetFocus(true))" Label="Datum" DisableToolbar="true" @bind-Date="Model.Date" Editable="true" For="@(() => Model.Date)"  />
                    <MudTimePicker @ref="_timePicker" @onfocus="@(() =>SetFocus(false))" Label="Tijd" DisableToolbar="true" @bind-Time="Model.Time" Editable="true" For="@(() => Model.Time)" />
                    <MudTextField Label="Naam" Class="mt-3"
                                  @bind-Value="Model.Name" For="@(() => Model.Name)" />
                    <MudTextField Label="Locatie"
                                  @bind-Value="Model.Location" For="@(() => Model.Location)" />
                    <MudTextField Label="Begeleider" Class="mt-3"
                                  @bind-Value="Model.Companion" For="@(() => Model.Companion)"/>
                    <MudSwitch @bind-Checked="Model.TaxiOrdered" Label="Taxi" LabelPosition="LabelPosition.Start" Color="Color.Info" For="@(() => Model.TaxiOrdered)" />
                </MudCardContent>
                <MudCardActions Class="d-flex justify-end">
                    <MudButton OnClick="Cancel">Annuleer</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-1">Opslaan</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>


@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _breakPoint = await BreakpointListener.GetCurrentBreakpointAsync();
        await base.OnAfterRenderAsync(firstRender);
    }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;
    
    [Inject] private IBrowserViewportService BreakpointListener { get; set; } = default!;
    
    [Parameter] public Appointment? EditAppointment { get; set; }
    
    private MudDatePicker _datePicker = default!;
    private MudTimePicker _timePicker = default!;
    private Breakpoint _breakPoint;

    private FormModel Model { get; set; } = new();

    protected override void OnInitialized()
    {
        if (EditAppointment == null) return;

        Model.Date = EditAppointment.DateTime;
        Model.Time = EditAppointment.DateTime.TimeOfDay;
        Model.Name = EditAppointment.Name;
        Model.Location = EditAppointment.Location;
        Model.TaxiOrdered = EditAppointment.TaxiOrdered;
        Model.Companion = EditAppointment.Companion;
    }

    private void OnValidSubmit(EditContext context)
    {
            MudDialog.Close(DialogResult.Ok(Model.ToAppointment()));
    }
    
    private async Task SetFocus(bool isDatePicker)
    {
        if (_breakPoint == Breakpoint.Xs)
        {
            await (isDatePicker ? _datePicker.BlurAsync() : _timePicker.BlurAsync());
        }
    }

    void Cancel() => MudDialog.Cancel();
    
    private class FormModel
    {
        [Required(ErrorMessage = "Geef een datum op")]
        public DateTime? Date { get; set; }
        [Required(ErrorMessage = "Geef een tijd op")]
        public TimeSpan? Time { get; set; }
        [Required(ErrorMessage = "Vul een naam in")]
        public string? Name { get; set; }
        [Required(ErrorMessage = "Geef een locatie op")]
        public string? Location { get; set; }
        public string? Companion { get; set; } = string.Empty;
        public bool TaxiOrdered { get; set; }

        public Appointment ToAppointment()
        {
            return new Appointment()
            {
                Id = Guid.NewGuid(),
                DateTime = Date!.Value.Add(Time!.Value),
                Name = Name!,
                Location = Location!,
                Companion = Companion!,
                TaxiOrdered = TaxiOrdered,
            };
        }
    }
}